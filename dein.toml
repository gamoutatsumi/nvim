[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'bluz71/vim-nightfly-guicolors'
hook_add = '''
lua << EOF
  vim.cmd('au MyAutoCmd VimEnter * nested colorscheme nightfly')
  vim.g.airline_theme = 'nightfly'
EOF
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
lua << EOF
  vim.api.nvim_set_keymap('n', 'n', 'nzz<Plug>(anzu-update-search-status)', {})
  vim.api.nvim_set_keymap('n', 'N', 'Nzz<Plug>(anzu-update-search-status)', {})
  vim.api.nvim_set_keymap('n', '*', '<Plug>(anzu-star)', {})
  vim.api.nvim_set_keymap('n', '#', '<Plug>(anzu-sharp)', {})
  vim.api.nvim_set_keymap('n', '<Esc><Esc>', ':<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)', { silent = true })
  vim.g.anzu_status_format = '(%i/%l)'
EOF
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
lua << EOF
local precious_enable_switchers = {
  vue = {
    setfiletype = 0
  }
}
precious_enable_switchers['*'] = {
  setfiletype = 1
}
vim.api.nvim_set_var('precious_enable_switchers', precious_enable_switchers)

vim.cmd('augroup VimPrecious')
vim.cmd('autocmd!')
vim.cmd('autocmd InsertEnter * PreciousSwitch')
vim.cmd('autocmd InsertLeave * PreciousReset')
vim.cmd('augroup END')
vim.cmd('autocmd User PreciousFileType_vim :TSBufDisable highlight')
EOF
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
lua << EOF
  vim.g.WebDevIconsNerdTreeBeforeGlyphPadding = ''
  vim.g.WebDevIconsUnicodeDecorateFolderNodes = true
  if (vim.fn.exists('g:loaded_webdevicons') == 1) then
    vim.fn['webdevicons#refresh']()
  end
EOF
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
lua << EOF
  vim.g.polyglot_disabled = {
    'markdown',
    'python'
  }
  vim.g.vim_json_syntax_conceal = 0
EOF
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
lua << EOF
  vim.o.completeopt = 'menuone,noselect,noinsert'
  vim.bo.tagfunc = 'CocTagFunc'
  vim.env.NVIM_COC_LOG_LEVEL = 'error'
  vim.g.coc_global_extensions = {
    'coc-pairs',
    'coc-snippets',
    'coc-json',
    'coc-yaml',
    'coc-fzf-preview',
    'coc-marketplace',
    'coc-discord-neovim',
    'coc-rls',
    'coc-markdownlint',
    'coc-lua'
  }
  vim.api.nvim_set_keymap( 'i', '<Tab>', 'pumvisible() ? "<C-n>" : "<Tab>"', { silent = true, expr = true })
  vim.api.nvim_set_keymap( 'i', '<S-Tab>', 'pumvisible() ? "<C-p>" : "<S-Tab>"', { silent = true, expr = true })
  vim.api.nvim_set_keymap( 'n', 'gd', ':vsp<CR><Plug>(coc-definition)', { silent = true })
  vim.api.nvim_set_keymap( 'n', 'gy', ':<Plug>(coc-type-definition)', { silent = true })
  vim.api.nvim_set_keymap( 'n', 'gi', ':<Plug>(coc-implementation)', { silent = true })
  vim.api.nvim_set_keymap( 'n', 'gr', ':<Plug>(coc-references)', { silent = true })
  vim.api.nvim_set_keymap( 'n', '[g', '<Plug>(coc-diagnostic-prev)', { silent = true })
  vim.api.nvim_set_keymap( 'n', 'g]', '<Plug>(coc-diagnostic-next)', { silent = true })
  vim.api.nvim_set_keymap( 'n', 'K', ':lua ShowCocDocumentation()<CR>', { silent = true, noremap = true })
  vim.api.nvim_set_keymap( 'i', '<CR>', 'pumvisible() ? coc#_select_confirm() : "<C-g>u<CR><C-r>=coc#on_enter()<CR>"', { silent = true, noremap = true, expr = true })
  vim.api.nvim_buf_set_keymap( 0, 'i', '<Esc>', 'pumvisible() ? "<C-e>" : "<Esc>"', { silent = true, nowait = true, expr = true })
  function ShowCocDocumentation()
    if (vim.fn.index({ 'vim', 'help' }, vim.bo.filetype) >= 0) then
      vim.cmd('execute "h ".expand("<cword>")')
    else
      vim.fn['CocAction']('doHover')
    end
  end
  vim.cmd('autocmd CursorHold * silent call CocActionAsync("highlight")')
EOF
'''

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'antoinemadec/coc-fzf'
rev = 'release'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-devicons']
hook_add = '''
lua << EOF
  --use Powerline
  vim.o.laststatus = 2
  vim.g.airline_powerline_fonts = 1
  vim.g['airline#extensions#tabline#buffer_idx_mode'] = 1
  vim.g['airline#extensions#whitespace#mixed_indent_algo'] = 1
  vim.g.airline_extensions = {
    'webdevicons',
    'branch',
    'anzu',
    'tabline',
    'hunks',
    'fern',
    'whitespace',
    'coc',
    'fugitiveline'
  }

  -- unicode symbols
  vim.g.airline_symbols = {
    paste = '∥',
    spell = 'Ꞩ',
    notexists = '∄',
    whitespace = 'Ξ',
    branch = '',
    readonly = '',
    linenr = '☰ ',
    maxlinenr = ''
  }

  vim.g.airline_left_sep = ''
  vim.g.airline_left_alt_sep = ''
  vim.g.airline_right_sep = ''
  vim.g.airline_right_alt_sep = ''
EOF
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
lua << EOF
  vim.api.nvim_set_keymap( 'n', '<C-f><C-v>', ':<C-u>Vista<CR>', { silent = true } )
  vim.api.nvim_set_keymap( 'n', '<C-f><C-s>', ':<C-u>Vista finder<CR>', { silent = true } )
  vim.g.vista_default_executive = 'coc'
  vim.g['vista#renderer#enable_icon'] = 1
  vim.g.vista_icon_indent = {
    '╰─▸ ',
    '├─▸ '
  }
  vim.cmd('autocmd VimEnter,BufWinEnter * call vista#RunForNearestMethodOrFunction()')
EOF
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'

[[plugins]]
repo = 'honza/vim-snippets'
hook_add = '''
lua << EOF
  vim.g.UltiSnipsExpandTrigger = '<NUL>'
  vim.g.UltiSnipsListSnippets = '<NUL>'
EOF
'''

#[[plugins]]
#repo = 'edkolev/tmuxline.vim'
#hook_add = '''
#let g:tmuxline_preset = {
  #\ 'a': '#S',
  #\ 'win': ['#I', '#{?#{m:ssh,#W},#{ssh-host},#W} #F'],
  #\ 'cwin': ['#I','#{?#{m:ssh,#W},#{ssh-host},#W} #F'],
  #\ 'y': ['%Y-%m-%d', '%H:%M'],
  #\ 'options': {
    #\ 'status': 'on',
    #\ 'status-left-style': 'none',
    #\ 'status-right-style': 'none',
    #\ 'status-right-length': '100',
    #\ 'status-left-length': '100',
  #\   }
  #\ }
#let g:tmuxline_status_justify = 'left'
#'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
lua << EOF
  vim.g['fern#drawer_width'] = 30
  vim.g['fern#renderer'] = 'nerdfont'
  vim.g['fern#renderer#nerdfont#padding'] = '  '
  vim.g['fern#disable_default_mappings'] = 1
  vim.g['fern#smart_cursor'] = 'stick'
  vim.g['fern#default_hidden'] = 1
  vim.api.nvim_set_keymap('n', '<C-e>', ':<C-u>Fern . -drawer -reveal=% -toggle<CR>', { silent = true, noremap = true })
  vim.api.nvim_set_keymap('n', '<Plug>(fern-close-drawer)', ':<C-u>FernDo close -drawer -stay<CR>', { silent = true, noremap = true })
  function FernSettings()
    vim.api.nvim_set_keymap('n', '<Plug>(fern-action-open-and-close)', '<Plug>(fern-action-open:select) <Plug>(fern-close-drawer)', { silent = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '<Plug>(fern-expand-or-collapse)', 'fern#smart#leaf("<Plug>(fern-action-collapse)", "<Plug>(fern-action-expand)", "<Plug>(fern-action-collapse)")', { silent = true, nowait = true, expr = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'a', '<Plug>(fern-choice)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 't', '<Plug>(fern-expand-or-collapse)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '<CR>', '<Plug>(fern-action-open-and-close)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'o', '<Plug>(fern-action-open-and-close)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'l', '<Plug>(fern-action-expand)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'h', '<Plug>(fern-action-collapse)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'x', '<Plug>(fern-action-mark:toggle)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'v', 'x', '<Plug>(fern-action-mark:toggle)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'N', '<Plug>(fern-action-new-file)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'K', '<Plug>(fern-action-new-dir)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'd', '<Plug>(fern-action-trash)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'r', '<Plug>(fern-action-rename)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'c', '<Plug>(fern-action-copy)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'm', '<Plug>(fern-action-move)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '!', '<Plug>(fern-action-hidden-toggle)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '<C-g>', '<Plug>(fern-action-debug)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '?', '<Plug>(fern-action-help)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '<C-c>', '<Plug>(fern-action-cancel)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', '.', '<Plug>(fern-action-repeat)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'R', '<Plug>(fern-action-redraw)', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'q', ':<C-u>quit<CR>', { silent = true, nowait = true })
    vim.api.nvim_buf_set_keymap(0, 'n', 'Q', ':<C-u>bwipe!<CR>', { silent = true, nowait = true, noremap = true })
    vim.wo.number = false
    vim.wo.relativenumber = false
  end
  vim.cmd('autocmd FileType fern lua FernSettings()')
  vim.cmd('autocmd FileType fern call glyph_palette#apply()')
EOF
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'

[[plugins]]
repo = 'skanehira/gh.vim'
hook_add = '''
lua << EOF
  vim.g.gh_token = vim.env.GH_VIM_TOKEN
EOF
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
lua << EOF
  vim.g.blamer_enabled = 1
  vim.g.blamer_date_format = '%Y/%m/%d %H:%M'
EOF
'''

[[plugins]]
repo = 'koron/nyancat-vim'

[[plugins]]
repo = 'wakatime/vim-wakatime'
hook_add = '''
lua << EOF
  vim.g.wakatime_PythonBinary = '/usr/bin/python'
EOF
'''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
lua << EOF
  vim.api.nvim_set_keymap('n', '<Leader>u', ':UndotreeToggle<CR>', { noremap = true })
EOF
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
hook_add = '''
lua << EOF
  vim.g.suda_smart_edit = 1
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_source = '''
lua << EOF
  require'nvim-treesitter.configs'.setup {
    -- Modules and its options go here
    ensure_installed = { 'python', 'lua', 'typescript', 'tsx', 'yaml', 'json', 'rust', 'html' },
    highlight = { enable = true },
    incremental_selection = { enable = true },
    textobjects = { enable = true },
    rainbow = { enable = true }
  }
EOF
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
hook_add = '''
lua require'colorizer'.setup()
'''
